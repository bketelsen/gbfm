package content

import (
	"github.com/bketelsen/gophersnacks/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Image)
// DB Table: Plural (images)
// Resource: Plural (Images)
// Path: Plural (/images)
// View Template Folder: Plural (/templates/images/)

// ImagesResource is the resource for the Image model
type ImagesResource struct {
	buffalo.Resource
}

// List gets all Images. This function is mapped to the path
// GET /images
func (v ImagesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	images := &models.Images{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Images from the DB
	if err := q.All(images); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, images))
}

// Show gets the data for one Image. This function is mapped to
// the path GET /images/{image_id}
func (v ImagesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Image
	image := &models.Image{}

	// To find the Image the parameter image_id is used.
	if err := tx.Find(image, c.Param("image_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, image))
}

// New renders the form for creating a new Image.
// This function is mapped to the path GET /images/new
func (v ImagesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Image{}))
}

// Create adds a Image to the DB. This function is mapped to the
// path POST /images
func (v ImagesResource) Create(c buffalo.Context) error {
	// Allocate an empty Image
	image := &models.Image{}

	// Bind image to the html form elements
	if err := c.Bind(image); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(image)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, image))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Image was created successfully")

	// and redirect to the images index page
	return c.Render(201, r.Auto(c, image))
}

// Edit renders a edit form for a Image. This function is
// mapped to the path GET /images/{image_id}/edit
func (v ImagesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Image
	image := &models.Image{}

	if err := tx.Find(image, c.Param("image_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, image))
}

// Update changes a Image in the DB. This function is mapped to
// the path PUT /images/{image_id}
func (v ImagesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Image
	image := &models.Image{}

	if err := tx.Find(image, c.Param("image_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Image to the html form elements
	if err := c.Bind(image); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(image)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, image))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Image was updated successfully")

	// and redirect to the images index page
	return c.Render(200, r.Auto(c, image))
}

// Destroy deletes a Image from the DB. This function is mapped
// to the path DELETE /images/{image_id}
func (v ImagesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Image
	image := &models.Image{}

	// To find the Image the parameter image_id is used.
	if err := tx.Find(image, c.Param("image_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(image); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Image was destroyed successfully")

	// Redirect to the images index page
	return c.Render(200, r.Auto(c, image))
}
